"""
p 진법으로 표현한 수란, 각 자리를 0부터 p-1의 숫자로만 나타낸 수를 의미합니다. p 진법으로 표현한 자연수 두개를 더한 결과를 q 진법으로 표현하려 합니다.
예를 들어, 3진법 수 112001과 12010을 더한 결과를 8진법으로 나타내면 1005입니다.
solution 함수의 매개변수로 p 진법 자연수를 담은 문자열 s1, s2와 두 수를 나타내는 진법의 기수 p, 두 수의 덧셈 결과를 표현할 진법의 기수 q가 매개변수로 주어집니다. p진법으로 표현된 두 수를 더한 결과를 q 진법으로 나타낸 값을 return 하도록 solution 함수를 완성해주세요.

---
매개변수 설명
p 진법으로 자연수를 담은 문자열 s1, s2와 두 수를 표현한 진법의 기수 p, 두 수의 덧셈 결과를 표현할 진법의 기수 q가 solution 함수의 매개변수로 주어집니다.
- p와 q는 2 이상 10 이하인 자연수입니다.
- s1과 s2의 길이는 1 이상 9 이하입니다.
- s1과 s2의 원소는 '0', '1', '2', …, ‘p-1’로만 구성됩니다.
- s1이나 s2가 ‘0’인 경우는 주어지지 않습니다.

---
return 값 설명
두 수를 더한 결과를 q 진법으로 나타낸 값을 문자열로 return 하도록 solution 함수를 완성해주세요.

---
예시
  s1      	s2     	p   	q   	return
  "112001"	"12010"	3   	8   	"1005"
"""

#다음과 같이 import를 사용할 수 있습니다.
#import math

# 10진수 변환 함수
def transfer_10(s, p):
    s_10 = 0
    s_len = len(s) - 1
    
    for num in s:
        # s에 담긴 숫자를 보면서 10진수로 변환
        s_10 += int(num)*(p**s_len)
        s_len -= 1

    return s_10

def solution(s1, s2, p, q):
    #여기에 코드를 작성해주세요.
    answer = ''
    
    # 10진수 변환함수를 통해 10진수로 바꿔준 후 둘을 더해줌
    s1_10 = transfer_10(s1, p)
    s2_10 = transfer_10(s2, p)
    num = s1_10 + s2_10
    
    # num이 다 나누어 떨어져서 1이 될 때까지 계속해서 반복
    while num != 1:
        # q를 나눈 나머지 값 answer에 차례대로 저장
        left = num % q
        answer += str(left)
        # num은 q로 나누어준 값을 갱신
        num = num // q
        # num이 1이 되면 종료될 때 1을 더해주면서 마지막 남은 나머지를 더해줌
        if num == 1:
            answer += '1'
    
    # while문에서 answer에 값을 넣을 때 1의 자리 수부터 더해주었기 때문에 역순으로 들어가 있음 -> 이를 뒤집어주는 코드
    answer = answer[::-1]

    return answer

#아래는 테스트케이스 출력을 해보기 위한 코드입니다.
s1 = "112001"
s2 = "12010"
p = 3
q = 8
ret = solution(s1, s2, p, q)

#[실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
print("solution 함수의 반환 값은", ret, "입니다.")
